// Code generated by mockery. DO NOT EDIT.

//go:build !release

package services

import (
	context "context"

	kafka "github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"
)

// MockKafkaWriter is an autogenerated mock type for the mockKafkaWriter type
type MockKafkaWriter struct {
	mock.Mock
}

type MockKafkaWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKafkaWriter) EXPECT() *MockKafkaWriter_Expecter {
	return &MockKafkaWriter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockKafkaWriter) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKafkaWriter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockKafkaWriter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockKafkaWriter_Expecter) Close() *MockKafkaWriter_Close_Call {
	return &MockKafkaWriter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockKafkaWriter_Close_Call) Run(run func()) *MockKafkaWriter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKafkaWriter_Close_Call) Return(_a0 error) *MockKafkaWriter_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKafkaWriter_Close_Call) RunAndReturn(run func() error) *MockKafkaWriter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// WriteMessages provides a mock function with given fields: ctx, msgs
func (_m *MockKafkaWriter) WriteMessages(ctx context.Context, msgs ...kafka.Message) error {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...kafka.Message) error); ok {
		r0 = rf(ctx, msgs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKafkaWriter_WriteMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteMessages'
type MockKafkaWriter_WriteMessages_Call struct {
	*mock.Call
}

// WriteMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs ...kafka.Message
func (_e *MockKafkaWriter_Expecter) WriteMessages(ctx interface{}, msgs ...interface{}) *MockKafkaWriter_WriteMessages_Call {
	return &MockKafkaWriter_WriteMessages_Call{Call: _e.mock.On("WriteMessages",
		append([]interface{}{ctx}, msgs...)...)}
}

func (_c *MockKafkaWriter_WriteMessages_Call) Run(run func(ctx context.Context, msgs ...kafka.Message)) *MockKafkaWriter_WriteMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]kafka.Message, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(kafka.Message)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockKafkaWriter_WriteMessages_Call) Return(_a0 error) *MockKafkaWriter_WriteMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKafkaWriter_WriteMessages_Call) RunAndReturn(run func(context.Context, ...kafka.Message) error) *MockKafkaWriter_WriteMessages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKafkaWriter creates a new instance of MockKafkaWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKafkaWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKafkaWriter {
	mock := &MockKafkaWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
