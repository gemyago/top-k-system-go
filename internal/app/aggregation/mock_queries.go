// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQueries is an autogenerated mock type for the mockQueries type
type MockQueries struct {
	mock.Mock
}

type MockQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueries) EXPECT() *MockQueries_Expecter {
	return &MockQueries_Expecter{mock: &_m.Mock}
}

// GetTopKItems provides a mock function with given fields: _a0, params
func (_m *MockQueries) GetTopKItems(_a0 context.Context, params GetTopKItemsParams) (*GetTopKItemsResponse, error) {
	ret := _m.Called(_a0, params)

	if len(ret) == 0 {
		panic("no return value specified for GetTopKItems")
	}

	var r0 *GetTopKItemsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetTopKItemsParams) (*GetTopKItemsResponse, error)); ok {
		return rf(_a0, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetTopKItemsParams) *GetTopKItemsResponse); ok {
		r0 = rf(_a0, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTopKItemsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetTopKItemsParams) error); ok {
		r1 = rf(_a0, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_GetTopKItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopKItems'
type MockQueries_GetTopKItems_Call struct {
	*mock.Call
}

// GetTopKItems is a helper method to define mock.On call
//   - _a0 context.Context
//   - params GetTopKItemsParams
func (_e *MockQueries_Expecter) GetTopKItems(_a0 interface{}, params interface{}) *MockQueries_GetTopKItems_Call {
	return &MockQueries_GetTopKItems_Call{Call: _e.mock.On("GetTopKItems", _a0, params)}
}

func (_c *MockQueries_GetTopKItems_Call) Run(run func(_a0 context.Context, params GetTopKItemsParams)) *MockQueries_GetTopKItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetTopKItemsParams))
	})
	return _c
}

func (_c *MockQueries_GetTopKItems_Call) Return(_a0 *GetTopKItemsResponse, _a1 error) *MockQueries_GetTopKItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_GetTopKItems_Call) RunAndReturn(run func(context.Context, GetTopKItemsParams) (*GetTopKItemsResponse, error)) *MockQueries_GetTopKItems_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueries creates a new instance of MockQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueries {
	mock := &MockQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
