// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCommands is an autogenerated mock type for the mockCommands type
type MockCommands struct {
	mock.Mock
}

type MockCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommands) EXPECT() *MockCommands_Expecter {
	return &MockCommands_Expecter{mock: &_m.Mock}
}

// CreateCheckPoint provides a mock function with given fields: ctx
func (_m *MockCommands) CreateCheckPoint(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateCheckPoint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommands_CreateCheckPoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheckPoint'
type MockCommands_CreateCheckPoint_Call struct {
	*mock.Call
}

// CreateCheckPoint is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCommands_Expecter) CreateCheckPoint(ctx interface{}) *MockCommands_CreateCheckPoint_Call {
	return &MockCommands_CreateCheckPoint_Call{Call: _e.mock.On("CreateCheckPoint", ctx)}
}

func (_c *MockCommands_CreateCheckPoint_Call) Run(run func(ctx context.Context)) *MockCommands_CreateCheckPoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCommands_CreateCheckPoint_Call) Return(_a0 error) *MockCommands_CreateCheckPoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommands_CreateCheckPoint_Call) RunAndReturn(run func(context.Context) error) *MockCommands_CreateCheckPoint_Call {
	_c.Call.Return(run)
	return _c
}

// StartAggregator provides a mock function with given fields: ctx
func (_m *MockCommands) StartAggregator(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartAggregator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommands_StartAggregator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartAggregator'
type MockCommands_StartAggregator_Call struct {
	*mock.Call
}

// StartAggregator is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCommands_Expecter) StartAggregator(ctx interface{}) *MockCommands_StartAggregator_Call {
	return &MockCommands_StartAggregator_Call{Call: _e.mock.On("StartAggregator", ctx)}
}

func (_c *MockCommands_StartAggregator_Call) Run(run func(ctx context.Context)) *MockCommands_StartAggregator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCommands_StartAggregator_Call) Return(_a0 error) *MockCommands_StartAggregator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommands_StartAggregator_Call) RunAndReturn(run func(context.Context) error) *MockCommands_StartAggregator_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommands creates a new instance of MockCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommands {
	mock := &MockCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
