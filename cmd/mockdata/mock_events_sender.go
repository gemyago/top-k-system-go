// Code generated by mockery. DO NOT EDIT.

//go:build !release

package main

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockEventsSender is an autogenerated mock type for the eventsSender type
type mockEventsSender struct {
	mock.Mock
}

type mockEventsSender_Expecter struct {
	mock *mock.Mock
}

func (_m *mockEventsSender) EXPECT() *mockEventsSender_Expecter {
	return &mockEventsSender_Expecter{mock: &_m.Mock}
}

// sendTestEvent provides a mock function with given fields: ctx, itemID, eventsNumber
func (_m *mockEventsSender) sendTestEvent(ctx context.Context, itemID string, eventsNumber int) error {
	ret := _m.Called(ctx, itemID, eventsNumber)

	if len(ret) == 0 {
		panic("no return value specified for sendTestEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, itemID, eventsNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockEventsSender_sendTestEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'sendTestEvent'
type mockEventsSender_sendTestEvent_Call struct {
	*mock.Call
}

// sendTestEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - itemID string
//   - eventsNumber int
func (_e *mockEventsSender_Expecter) sendTestEvent(ctx interface{}, itemID interface{}, eventsNumber interface{}) *mockEventsSender_sendTestEvent_Call {
	return &mockEventsSender_sendTestEvent_Call{Call: _e.mock.On("sendTestEvent", ctx, itemID, eventsNumber)}
}

func (_c *mockEventsSender_sendTestEvent_Call) Run(run func(ctx context.Context, itemID string, eventsNumber int)) *mockEventsSender_sendTestEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *mockEventsSender_sendTestEvent_Call) Return(_a0 error) *mockEventsSender_sendTestEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEventsSender_sendTestEvent_Call) RunAndReturn(run func(context.Context, string, int) error) *mockEventsSender_sendTestEvent_Call {
	_c.Call.Return(run)
	return _c
}

// sendTestEvents provides a mock function with given fields: ctx, itemIDsFile, eventsMin, eventsMax
func (_m *mockEventsSender) sendTestEvents(ctx context.Context, itemIDsFile string, eventsMin int, eventsMax int) error {
	ret := _m.Called(ctx, itemIDsFile, eventsMin, eventsMax)

	if len(ret) == 0 {
		panic("no return value specified for sendTestEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) error); ok {
		r0 = rf(ctx, itemIDsFile, eventsMin, eventsMax)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockEventsSender_sendTestEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'sendTestEvents'
type mockEventsSender_sendTestEvents_Call struct {
	*mock.Call
}

// sendTestEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - itemIDsFile string
//   - eventsMin int
//   - eventsMax int
func (_e *mockEventsSender_Expecter) sendTestEvents(ctx interface{}, itemIDsFile interface{}, eventsMin interface{}, eventsMax interface{}) *mockEventsSender_sendTestEvents_Call {
	return &mockEventsSender_sendTestEvents_Call{Call: _e.mock.On("sendTestEvents", ctx, itemIDsFile, eventsMin, eventsMax)}
}

func (_c *mockEventsSender_sendTestEvents_Call) Run(run func(ctx context.Context, itemIDsFile string, eventsMin int, eventsMax int)) *mockEventsSender_sendTestEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *mockEventsSender_sendTestEvents_Call) Return(_a0 error) *mockEventsSender_sendTestEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEventsSender_sendTestEvents_Call) RunAndReturn(run func(context.Context, string, int, int) error) *mockEventsSender_sendTestEvents_Call {
	_c.Call.Return(run)
	return _c
}

// newMockEventsSender creates a new instance of mockEventsSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockEventsSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockEventsSender {
	mock := &mockEventsSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
