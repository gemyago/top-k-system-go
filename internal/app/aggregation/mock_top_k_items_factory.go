// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import mock "github.com/stretchr/testify/mock"

// mockTopKItemsFactory is an autogenerated mock type for the topKItemsFactory type
type mockTopKItemsFactory struct {
	mock.Mock
}

type mockTopKItemsFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTopKItemsFactory) EXPECT() *mockTopKItemsFactory_Expecter {
	return &mockTopKItemsFactory_Expecter{mock: &_m.Mock}
}

// newTopKItems provides a mock function with given fields: maxSize
func (_m *mockTopKItemsFactory) newTopKItems(maxSize int) topKItems {
	ret := _m.Called(maxSize)

	if len(ret) == 0 {
		panic("no return value specified for newTopKItems")
	}

	var r0 topKItems
	if rf, ok := ret.Get(0).(func(int) topKItems); ok {
		r0 = rf(maxSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topKItems)
		}
	}

	return r0
}

// mockTopKItemsFactory_newTopKItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newTopKItems'
type mockTopKItemsFactory_newTopKItems_Call struct {
	*mock.Call
}

// newTopKItems is a helper method to define mock.On call
//   - maxSize int
func (_e *mockTopKItemsFactory_Expecter) newTopKItems(maxSize interface{}) *mockTopKItemsFactory_newTopKItems_Call {
	return &mockTopKItemsFactory_newTopKItems_Call{Call: _e.mock.On("newTopKItems", maxSize)}
}

func (_c *mockTopKItemsFactory_newTopKItems_Call) Run(run func(maxSize int)) *mockTopKItemsFactory_newTopKItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *mockTopKItemsFactory_newTopKItems_Call) Return(_a0 topKItems) *mockTopKItemsFactory_newTopKItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTopKItemsFactory_newTopKItems_Call) RunAndReturn(run func(int) topKItems) *mockTopKItemsFactory_newTopKItems_Call {
	_c.Call.Return(run)
	return _c
}

// newMockTopKItemsFactory creates a new instance of mockTopKItemsFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTopKItemsFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTopKItemsFactory {
	mock := &mockTopKItemsFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
