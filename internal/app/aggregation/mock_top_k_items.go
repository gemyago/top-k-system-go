// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import mock "github.com/stretchr/testify/mock"

// mockTopKItems is an autogenerated mock type for the topKItems type
type mockTopKItems struct {
	mock.Mock
}

type mockTopKItems_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTopKItems) EXPECT() *mockTopKItems_Expecter {
	return &mockTopKItems_Expecter{mock: &_m.Mock}
}

// getItems provides a mock function with given fields: limit
func (_m *mockTopKItems) getItems(limit int) []*topKItem {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for getItems")
	}

	var r0 []*topKItem
	if rf, ok := ret.Get(0).(func(int) []*topKItem); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*topKItem)
		}
	}

	return r0
}

// mockTopKItems_getItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getItems'
type mockTopKItems_getItems_Call struct {
	*mock.Call
}

// getItems is a helper method to define mock.On call
//   - limit int
func (_e *mockTopKItems_Expecter) getItems(limit interface{}) *mockTopKItems_getItems_Call {
	return &mockTopKItems_getItems_Call{Call: _e.mock.On("getItems", limit)}
}

func (_c *mockTopKItems_getItems_Call) Run(run func(limit int)) *mockTopKItems_getItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *mockTopKItems_getItems_Call) Return(_a0 []*topKItem) *mockTopKItems_getItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTopKItems_getItems_Call) RunAndReturn(run func(int) []*topKItem) *mockTopKItems_getItems_Call {
	_c.Call.Return(run)
	return _c
}

// load provides a mock function with given fields: vals
func (_m *mockTopKItems) load(vals []*topKItem) {
	_m.Called(vals)
}

// mockTopKItems_load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'load'
type mockTopKItems_load_Call struct {
	*mock.Call
}

// load is a helper method to define mock.On call
//   - vals []*topKItem
func (_e *mockTopKItems_Expecter) load(vals interface{}) *mockTopKItems_load_Call {
	return &mockTopKItems_load_Call{Call: _e.mock.On("load", vals)}
}

func (_c *mockTopKItems_load_Call) Run(run func(vals []*topKItem)) *mockTopKItems_load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*topKItem))
	})
	return _c
}

func (_c *mockTopKItems_load_Call) Return() *mockTopKItems_load_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockTopKItems_load_Call) RunAndReturn(run func([]*topKItem)) *mockTopKItems_load_Call {
	_c.Call.Return(run)
	return _c
}

// updateIfGreater provides a mock function with given fields: item
func (_m *mockTopKItems) updateIfGreater(item topKItem) {
	_m.Called(item)
}

// mockTopKItems_updateIfGreater_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'updateIfGreater'
type mockTopKItems_updateIfGreater_Call struct {
	*mock.Call
}

// updateIfGreater is a helper method to define mock.On call
//   - item topKItem
func (_e *mockTopKItems_Expecter) updateIfGreater(item interface{}) *mockTopKItems_updateIfGreater_Call {
	return &mockTopKItems_updateIfGreater_Call{Call: _e.mock.On("updateIfGreater", item)}
}

func (_c *mockTopKItems_updateIfGreater_Call) Run(run func(item topKItem)) *mockTopKItems_updateIfGreater_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(topKItem))
	})
	return _c
}

func (_c *mockTopKItems_updateIfGreater_Call) Return() *mockTopKItems_updateIfGreater_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockTopKItems_updateIfGreater_Call) RunAndReturn(run func(topKItem)) *mockTopKItems_updateIfGreater_Call {
	_c.Call.Return(run)
	return _c
}

// newMockTopKItems creates a new instance of mockTopKItems. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTopKItems(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTopKItems {
	mock := &mockTopKItems{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
