// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCheckPointer is an autogenerated mock type for the CheckPointer type
type MockCheckPointer struct {
	mock.Mock
}

type MockCheckPointer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCheckPointer) EXPECT() *MockCheckPointer_Expecter {
	return &MockCheckPointer_Expecter{mock: &_m.Mock}
}

// dumpState provides a mock function with given fields: ctx, counters
func (_m *MockCheckPointer) dumpState(ctx context.Context, counters Counters) error {
	ret := _m.Called(ctx, counters)

	if len(ret) == 0 {
		panic("no return value specified for dumpState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Counters) error); ok {
		r0 = rf(ctx, counters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCheckPointer_dumpState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'dumpState'
type MockCheckPointer_dumpState_Call struct {
	*mock.Call
}

// dumpState is a helper method to define mock.On call
//   - ctx context.Context
//   - counters Counters
func (_e *MockCheckPointer_Expecter) dumpState(ctx interface{}, counters interface{}) *MockCheckPointer_dumpState_Call {
	return &MockCheckPointer_dumpState_Call{Call: _e.mock.On("dumpState", ctx, counters)}
}

func (_c *MockCheckPointer_dumpState_Call) Run(run func(ctx context.Context, counters Counters)) *MockCheckPointer_dumpState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Counters))
	})
	return _c
}

func (_c *MockCheckPointer_dumpState_Call) Return(_a0 error) *MockCheckPointer_dumpState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCheckPointer_dumpState_Call) RunAndReturn(run func(context.Context, Counters) error) *MockCheckPointer_dumpState_Call {
	_c.Call.Return(run)
	return _c
}

// restoreState provides a mock function with given fields: ctx, counters
func (_m *MockCheckPointer) restoreState(ctx context.Context, counters Counters) error {
	ret := _m.Called(ctx, counters)

	if len(ret) == 0 {
		panic("no return value specified for restoreState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Counters) error); ok {
		r0 = rf(ctx, counters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCheckPointer_restoreState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'restoreState'
type MockCheckPointer_restoreState_Call struct {
	*mock.Call
}

// restoreState is a helper method to define mock.On call
//   - ctx context.Context
//   - counters Counters
func (_e *MockCheckPointer_Expecter) restoreState(ctx interface{}, counters interface{}) *MockCheckPointer_restoreState_Call {
	return &MockCheckPointer_restoreState_Call{Call: _e.mock.On("restoreState", ctx, counters)}
}

func (_c *MockCheckPointer_restoreState_Call) Run(run func(ctx context.Context, counters Counters)) *MockCheckPointer_restoreState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Counters))
	})
	return _c
}

func (_c *MockCheckPointer_restoreState_Call) Return(_a0 error) *MockCheckPointer_restoreState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCheckPointer_restoreState_Call) RunAndReturn(run func(context.Context, Counters) error) *MockCheckPointer_restoreState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCheckPointer creates a new instance of MockCheckPointer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCheckPointer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCheckPointer {
	mock := &MockCheckPointer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
