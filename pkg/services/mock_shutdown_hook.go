// Code generated by mockery. DO NOT EDIT.

//go:build !release

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockShutdownHook is an autogenerated mock type for the ShutdownHook type
type MockShutdownHook struct {
	mock.Mock
}

type MockShutdownHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShutdownHook) EXPECT() *MockShutdownHook_Expecter {
	return &MockShutdownHook_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockShutdownHook) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockShutdownHook_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockShutdownHook_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockShutdownHook_Expecter) Name() *MockShutdownHook_Name_Call {
	return &MockShutdownHook_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockShutdownHook_Name_Call) Run(run func()) *MockShutdownHook_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShutdownHook_Name_Call) Return(_a0 string) *MockShutdownHook_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShutdownHook_Name_Call) RunAndReturn(run func() string) *MockShutdownHook_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockShutdownHook) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockShutdownHook_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockShutdownHook_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockShutdownHook_Expecter) Shutdown(ctx interface{}) *MockShutdownHook_Shutdown_Call {
	return &MockShutdownHook_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockShutdownHook_Shutdown_Call) Run(run func(ctx context.Context)) *MockShutdownHook_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockShutdownHook_Shutdown_Call) Return(_a0 error) *MockShutdownHook_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShutdownHook_Shutdown_Call) RunAndReturn(run func(context.Context) error) *MockShutdownHook_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShutdownHook creates a new instance of MockShutdownHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShutdownHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShutdownHook {
	mock := &MockShutdownHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
