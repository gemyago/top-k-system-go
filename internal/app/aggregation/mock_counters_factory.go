// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import mock "github.com/stretchr/testify/mock"

// mockCountersFactory is an autogenerated mock type for the countersFactory type
type mockCountersFactory struct {
	mock.Mock
}

type mockCountersFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCountersFactory) EXPECT() *mockCountersFactory_Expecter {
	return &mockCountersFactory_Expecter{mock: &_m.Mock}
}

// newCounters provides a mock function with given fields:
func (_m *mockCountersFactory) newCounters() counters {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for newCounters")
	}

	var r0 counters
	if rf, ok := ret.Get(0).(func() counters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(counters)
		}
	}

	return r0
}

// mockCountersFactory_newCounters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'newCounters'
type mockCountersFactory_newCounters_Call struct {
	*mock.Call
}

// newCounters is a helper method to define mock.On call
func (_e *mockCountersFactory_Expecter) newCounters() *mockCountersFactory_newCounters_Call {
	return &mockCountersFactory_newCounters_Call{Call: _e.mock.On("newCounters")}
}

func (_c *mockCountersFactory_newCounters_Call) Run(run func()) *mockCountersFactory_newCounters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCountersFactory_newCounters_Call) Return(_a0 counters) *mockCountersFactory_newCounters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCountersFactory_newCounters_Call) RunAndReturn(run func() counters) *mockCountersFactory_newCounters_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCountersFactory creates a new instance of mockCountersFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCountersFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCountersFactory {
	mock := &mockCountersFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
