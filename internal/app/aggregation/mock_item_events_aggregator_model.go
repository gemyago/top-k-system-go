// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import (
	context "context"

	models "github.com/gemyago/top-k-system-go/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// mockItemEventsAggregatorModel is an autogenerated mock type for the itemEventsAggregatorModel type
type mockItemEventsAggregatorModel struct {
	mock.Mock
}

type mockItemEventsAggregatorModel_Expecter struct {
	mock *mock.Mock
}

func (_m *mockItemEventsAggregatorModel) EXPECT() *mockItemEventsAggregatorModel_Expecter {
	return &mockItemEventsAggregatorModel_Expecter{mock: &_m.Mock}
}

// aggregateItemEvent provides a mock function with given fields: offset, evt
func (_m *mockItemEventsAggregatorModel) aggregateItemEvent(offset int64, evt *models.ItemEvent) {
	_m.Called(offset, evt)
}

// mockItemEventsAggregatorModel_aggregateItemEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'aggregateItemEvent'
type mockItemEventsAggregatorModel_aggregateItemEvent_Call struct {
	*mock.Call
}

// aggregateItemEvent is a helper method to define mock.On call
//   - offset int64
//   - evt *models.ItemEvent
func (_e *mockItemEventsAggregatorModel_Expecter) aggregateItemEvent(offset interface{}, evt interface{}) *mockItemEventsAggregatorModel_aggregateItemEvent_Call {
	return &mockItemEventsAggregatorModel_aggregateItemEvent_Call{Call: _e.mock.On("aggregateItemEvent", offset, evt)}
}

func (_c *mockItemEventsAggregatorModel_aggregateItemEvent_Call) Run(run func(offset int64, evt *models.ItemEvent)) *mockItemEventsAggregatorModel_aggregateItemEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*models.ItemEvent))
	})
	return _c
}

func (_c *mockItemEventsAggregatorModel_aggregateItemEvent_Call) Return() *mockItemEventsAggregatorModel_aggregateItemEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockItemEventsAggregatorModel_aggregateItemEvent_Call) RunAndReturn(run func(int64, *models.ItemEvent)) *mockItemEventsAggregatorModel_aggregateItemEvent_Call {
	_c.Call.Return(run)
	return _c
}

// fetchMessages provides a mock function with given fields: ctx
func (_m *mockItemEventsAggregatorModel) fetchMessages(ctx context.Context) <-chan fetchMessageResult {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for fetchMessages")
	}

	var r0 <-chan fetchMessageResult
	if rf, ok := ret.Get(0).(func(context.Context) <-chan fetchMessageResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan fetchMessageResult)
		}
	}

	return r0
}

// mockItemEventsAggregatorModel_fetchMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'fetchMessages'
type mockItemEventsAggregatorModel_fetchMessages_Call struct {
	*mock.Call
}

// fetchMessages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockItemEventsAggregatorModel_Expecter) fetchMessages(ctx interface{}) *mockItemEventsAggregatorModel_fetchMessages_Call {
	return &mockItemEventsAggregatorModel_fetchMessages_Call{Call: _e.mock.On("fetchMessages", ctx)}
}

func (_c *mockItemEventsAggregatorModel_fetchMessages_Call) Run(run func(ctx context.Context)) *mockItemEventsAggregatorModel_fetchMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockItemEventsAggregatorModel_fetchMessages_Call) Return(_a0 <-chan fetchMessageResult) *mockItemEventsAggregatorModel_fetchMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockItemEventsAggregatorModel_fetchMessages_Call) RunAndReturn(run func(context.Context) <-chan fetchMessageResult) *mockItemEventsAggregatorModel_fetchMessages_Call {
	_c.Call.Return(run)
	return _c
}

// flushMessages provides a mock function with given fields: ctx, counters1
func (_m *mockItemEventsAggregatorModel) flushMessages(ctx context.Context, counters1 counters) {
	_m.Called(ctx, counters1)
}

// mockItemEventsAggregatorModel_flushMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'flushMessages'
type mockItemEventsAggregatorModel_flushMessages_Call struct {
	*mock.Call
}

// flushMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - counters1 counters
func (_e *mockItemEventsAggregatorModel_Expecter) flushMessages(ctx interface{}, counters1 interface{}) *mockItemEventsAggregatorModel_flushMessages_Call {
	return &mockItemEventsAggregatorModel_flushMessages_Call{Call: _e.mock.On("flushMessages", ctx, counters1)}
}

func (_c *mockItemEventsAggregatorModel_flushMessages_Call) Run(run func(ctx context.Context, counters1 counters)) *mockItemEventsAggregatorModel_flushMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(counters))
	})
	return _c
}

func (_c *mockItemEventsAggregatorModel_flushMessages_Call) Return() *mockItemEventsAggregatorModel_flushMessages_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockItemEventsAggregatorModel_flushMessages_Call) RunAndReturn(run func(context.Context, counters)) *mockItemEventsAggregatorModel_flushMessages_Call {
	_c.Call.Return(run)
	return _c
}

// newMockItemEventsAggregatorModel creates a new instance of mockItemEventsAggregatorModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockItemEventsAggregatorModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockItemEventsAggregatorModel {
	mock := &mockItemEventsAggregatorModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
