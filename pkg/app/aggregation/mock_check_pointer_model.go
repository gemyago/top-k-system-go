// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCheckPointerModel is an autogenerated mock type for the CheckPointerModel type
type MockCheckPointerModel struct {
	mock.Mock
}

type MockCheckPointerModel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCheckPointerModel) EXPECT() *MockCheckPointerModel_Expecter {
	return &MockCheckPointerModel_Expecter{mock: &_m.Mock}
}

// readCounters provides a mock function with given fields: ctx, blobFileName
func (_m *MockCheckPointerModel) readCounters(ctx context.Context, blobFileName string) (map[string]int64, error) {
	ret := _m.Called(ctx, blobFileName)

	if len(ret) == 0 {
		panic("no return value specified for readCounters")
	}

	var r0 map[string]int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]int64, error)); ok {
		return rf(ctx, blobFileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]int64); ok {
		r0 = rf(ctx, blobFileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, blobFileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckPointerModel_readCounters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'readCounters'
type MockCheckPointerModel_readCounters_Call struct {
	*mock.Call
}

// readCounters is a helper method to define mock.On call
//   - ctx context.Context
//   - blobFileName string
func (_e *MockCheckPointerModel_Expecter) readCounters(ctx interface{}, blobFileName interface{}) *MockCheckPointerModel_readCounters_Call {
	return &MockCheckPointerModel_readCounters_Call{Call: _e.mock.On("readCounters", ctx, blobFileName)}
}

func (_c *MockCheckPointerModel_readCounters_Call) Run(run func(ctx context.Context, blobFileName string)) *MockCheckPointerModel_readCounters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCheckPointerModel_readCounters_Call) Return(_a0 map[string]int64, _a1 error) *MockCheckPointerModel_readCounters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckPointerModel_readCounters_Call) RunAndReturn(run func(context.Context, string) (map[string]int64, error)) *MockCheckPointerModel_readCounters_Call {
	_c.Call.Return(run)
	return _c
}

// readManifest provides a mock function with given fields: ctx
func (_m *MockCheckPointerModel) readManifest(ctx context.Context) (checkPointManifest, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for readManifest")
	}

	var r0 checkPointManifest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (checkPointManifest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) checkPointManifest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(checkPointManifest)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckPointerModel_readManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'readManifest'
type MockCheckPointerModel_readManifest_Call struct {
	*mock.Call
}

// readManifest is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCheckPointerModel_Expecter) readManifest(ctx interface{}) *MockCheckPointerModel_readManifest_Call {
	return &MockCheckPointerModel_readManifest_Call{Call: _e.mock.On("readManifest", ctx)}
}

func (_c *MockCheckPointerModel_readManifest_Call) Run(run func(ctx context.Context)) *MockCheckPointerModel_readManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCheckPointerModel_readManifest_Call) Return(_a0 checkPointManifest, _a1 error) *MockCheckPointerModel_readManifest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckPointerModel_readManifest_Call) RunAndReturn(run func(context.Context) (checkPointManifest, error)) *MockCheckPointerModel_readManifest_Call {
	_c.Call.Return(run)
	return _c
}

// writeCounters provides a mock function with given fields: ctx, blobFileName, val
func (_m *MockCheckPointerModel) writeCounters(ctx context.Context, blobFileName string, val map[string]int64) error {
	ret := _m.Called(ctx, blobFileName, val)

	if len(ret) == 0 {
		panic("no return value specified for writeCounters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]int64) error); ok {
		r0 = rf(ctx, blobFileName, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCheckPointerModel_writeCounters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'writeCounters'
type MockCheckPointerModel_writeCounters_Call struct {
	*mock.Call
}

// writeCounters is a helper method to define mock.On call
//   - ctx context.Context
//   - blobFileName string
//   - val map[string]int64
func (_e *MockCheckPointerModel_Expecter) writeCounters(ctx interface{}, blobFileName interface{}, val interface{}) *MockCheckPointerModel_writeCounters_Call {
	return &MockCheckPointerModel_writeCounters_Call{Call: _e.mock.On("writeCounters", ctx, blobFileName, val)}
}

func (_c *MockCheckPointerModel_writeCounters_Call) Run(run func(ctx context.Context, blobFileName string, val map[string]int64)) *MockCheckPointerModel_writeCounters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]int64))
	})
	return _c
}

func (_c *MockCheckPointerModel_writeCounters_Call) Return(_a0 error) *MockCheckPointerModel_writeCounters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCheckPointerModel_writeCounters_Call) RunAndReturn(run func(context.Context, string, map[string]int64) error) *MockCheckPointerModel_writeCounters_Call {
	_c.Call.Return(run)
	return _c
}

// writeManifest provides a mock function with given fields: ctx, m
func (_m *MockCheckPointerModel) writeManifest(ctx context.Context, m checkPointManifest) error {
	ret := _m.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for writeManifest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, checkPointManifest) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCheckPointerModel_writeManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'writeManifest'
type MockCheckPointerModel_writeManifest_Call struct {
	*mock.Call
}

// writeManifest is a helper method to define mock.On call
//   - ctx context.Context
//   - m checkPointManifest
func (_e *MockCheckPointerModel_Expecter) writeManifest(ctx interface{}, m interface{}) *MockCheckPointerModel_writeManifest_Call {
	return &MockCheckPointerModel_writeManifest_Call{Call: _e.mock.On("writeManifest", ctx, m)}
}

func (_c *MockCheckPointerModel_writeManifest_Call) Run(run func(ctx context.Context, m checkPointManifest)) *MockCheckPointerModel_writeManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(checkPointManifest))
	})
	return _c
}

func (_c *MockCheckPointerModel_writeManifest_Call) Return(_a0 error) *MockCheckPointerModel_writeManifest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCheckPointerModel_writeManifest_Call) RunAndReturn(run func(context.Context, checkPointManifest) error) *MockCheckPointerModel_writeManifest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCheckPointerModel creates a new instance of MockCheckPointerModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCheckPointerModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCheckPointerModel {
	mock := &MockCheckPointerModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
