// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import (
	context "context"

	models "github.com/gemyago/top-k-system-go/pkg/app/models"
	mock "github.com/stretchr/testify/mock"
)

// MockItemEventsAggregatorModel is an autogenerated mock type for the ItemEventsAggregatorModel type
type MockItemEventsAggregatorModel struct {
	mock.Mock
}

type MockItemEventsAggregatorModel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockItemEventsAggregatorModel) EXPECT() *MockItemEventsAggregatorModel_Expecter {
	return &MockItemEventsAggregatorModel_Expecter{mock: &_m.Mock}
}

// aggregateItemEvent provides a mock function with given fields: offset, evt
func (_m *MockItemEventsAggregatorModel) aggregateItemEvent(offset int64, evt *models.ItemEvent) {
	_m.Called(offset, evt)
}

// MockItemEventsAggregatorModel_aggregateItemEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'aggregateItemEvent'
type MockItemEventsAggregatorModel_aggregateItemEvent_Call struct {
	*mock.Call
}

// aggregateItemEvent is a helper method to define mock.On call
//   - offset int64
//   - evt *models.ItemEvent
func (_e *MockItemEventsAggregatorModel_Expecter) aggregateItemEvent(offset interface{}, evt interface{}) *MockItemEventsAggregatorModel_aggregateItemEvent_Call {
	return &MockItemEventsAggregatorModel_aggregateItemEvent_Call{Call: _e.mock.On("aggregateItemEvent", offset, evt)}
}

func (_c *MockItemEventsAggregatorModel_aggregateItemEvent_Call) Run(run func(offset int64, evt *models.ItemEvent)) *MockItemEventsAggregatorModel_aggregateItemEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*models.ItemEvent))
	})
	return _c
}

func (_c *MockItemEventsAggregatorModel_aggregateItemEvent_Call) Return() *MockItemEventsAggregatorModel_aggregateItemEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockItemEventsAggregatorModel_aggregateItemEvent_Call) RunAndReturn(run func(int64, *models.ItemEvent)) *MockItemEventsAggregatorModel_aggregateItemEvent_Call {
	_c.Call.Return(run)
	return _c
}

// fetchMessages provides a mock function with given fields: ctx
func (_m *MockItemEventsAggregatorModel) fetchMessages(ctx context.Context) <-chan fetchMessageResult {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for fetchMessages")
	}

	var r0 <-chan fetchMessageResult
	if rf, ok := ret.Get(0).(func(context.Context) <-chan fetchMessageResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan fetchMessageResult)
		}
	}

	return r0
}

// MockItemEventsAggregatorModel_fetchMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'fetchMessages'
type MockItemEventsAggregatorModel_fetchMessages_Call struct {
	*mock.Call
}

// fetchMessages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockItemEventsAggregatorModel_Expecter) fetchMessages(ctx interface{}) *MockItemEventsAggregatorModel_fetchMessages_Call {
	return &MockItemEventsAggregatorModel_fetchMessages_Call{Call: _e.mock.On("fetchMessages", ctx)}
}

func (_c *MockItemEventsAggregatorModel_fetchMessages_Call) Run(run func(ctx context.Context)) *MockItemEventsAggregatorModel_fetchMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockItemEventsAggregatorModel_fetchMessages_Call) Return(_a0 <-chan fetchMessageResult) *MockItemEventsAggregatorModel_fetchMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockItemEventsAggregatorModel_fetchMessages_Call) RunAndReturn(run func(context.Context) <-chan fetchMessageResult) *MockItemEventsAggregatorModel_fetchMessages_Call {
	_c.Call.Return(run)
	return _c
}

// flushMessages provides a mock function with given fields: ctx
func (_m *MockItemEventsAggregatorModel) flushMessages(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for flushMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockItemEventsAggregatorModel_flushMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'flushMessages'
type MockItemEventsAggregatorModel_flushMessages_Call struct {
	*mock.Call
}

// flushMessages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockItemEventsAggregatorModel_Expecter) flushMessages(ctx interface{}) *MockItemEventsAggregatorModel_flushMessages_Call {
	return &MockItemEventsAggregatorModel_flushMessages_Call{Call: _e.mock.On("flushMessages", ctx)}
}

func (_c *MockItemEventsAggregatorModel_flushMessages_Call) Run(run func(ctx context.Context)) *MockItemEventsAggregatorModel_flushMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockItemEventsAggregatorModel_flushMessages_Call) Return(_a0 error) *MockItemEventsAggregatorModel_flushMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockItemEventsAggregatorModel_flushMessages_Call) RunAndReturn(run func(context.Context) error) *MockItemEventsAggregatorModel_flushMessages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockItemEventsAggregatorModel creates a new instance of MockItemEventsAggregatorModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockItemEventsAggregatorModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockItemEventsAggregatorModel {
	mock := &MockItemEventsAggregatorModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
