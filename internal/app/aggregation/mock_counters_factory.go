// Code generated by mockery. DO NOT EDIT.

//go:build !release

package aggregation

import mock "github.com/stretchr/testify/mock"

// MockCountersFactory is an autogenerated mock type for the CountersFactory type
type MockCountersFactory struct {
	mock.Mock
}

type MockCountersFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCountersFactory) EXPECT() *MockCountersFactory_Expecter {
	return &MockCountersFactory_Expecter{mock: &_m.Mock}
}

// NewCounters provides a mock function with given fields:
func (_m *MockCountersFactory) NewCounters() Counters {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewCounters")
	}

	var r0 Counters
	if rf, ok := ret.Get(0).(func() Counters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Counters)
		}
	}

	return r0
}

// MockCountersFactory_NewCounters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCounters'
type MockCountersFactory_NewCounters_Call struct {
	*mock.Call
}

// NewCounters is a helper method to define mock.On call
func (_e *MockCountersFactory_Expecter) NewCounters() *MockCountersFactory_NewCounters_Call {
	return &MockCountersFactory_NewCounters_Call{Call: _e.mock.On("NewCounters")}
}

func (_c *MockCountersFactory_NewCounters_Call) Run(run func()) *MockCountersFactory_NewCounters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCountersFactory_NewCounters_Call) Return(_a0 Counters) *MockCountersFactory_NewCounters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCountersFactory_NewCounters_Call) RunAndReturn(run func() Counters) *MockCountersFactory_NewCounters_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCountersFactory creates a new instance of MockCountersFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCountersFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCountersFactory {
	mock := &MockCountersFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
