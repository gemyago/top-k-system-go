// Code generated by mockery. DO NOT EDIT.

//go:build !release

package ingestion

import (
	context "context"

	models "github.com/gemyago/top-k-system-go/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// MockCommands is an autogenerated mock type for the Commands type
type MockCommands struct {
	mock.Mock
}

type MockCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommands) EXPECT() *MockCommands_Expecter {
	return &MockCommands_Expecter{mock: &_m.Mock}
}

// IngestItemEvent provides a mock function with given fields: ctx, evt
func (_m *MockCommands) IngestItemEvent(ctx context.Context, evt *models.ItemEvent) error {
	ret := _m.Called(ctx, evt)

	if len(ret) == 0 {
		panic("no return value specified for IngestItemEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ItemEvent) error); ok {
		r0 = rf(ctx, evt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommands_IngestItemEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngestItemEvent'
type MockCommands_IngestItemEvent_Call struct {
	*mock.Call
}

// IngestItemEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - evt *models.ItemEvent
func (_e *MockCommands_Expecter) IngestItemEvent(ctx interface{}, evt interface{}) *MockCommands_IngestItemEvent_Call {
	return &MockCommands_IngestItemEvent_Call{Call: _e.mock.On("IngestItemEvent", ctx, evt)}
}

func (_c *MockCommands_IngestItemEvent_Call) Run(run func(ctx context.Context, evt *models.ItemEvent)) *MockCommands_IngestItemEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.ItemEvent))
	})
	return _c
}

func (_c *MockCommands_IngestItemEvent_Call) Return(_a0 error) *MockCommands_IngestItemEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommands_IngestItemEvent_Call) RunAndReturn(run func(context.Context, *models.ItemEvent) error) *MockCommands_IngestItemEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommands creates a new instance of MockCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommands {
	mock := &MockCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
